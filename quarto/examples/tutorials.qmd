---
title: "Tutorial: Primeros Pasos con Quarto"
author: "Matriz Team"
date: today
format: 
  html:
    code-fold: false
    code-tools: true
    toc: true
    number-sections: true
---

# Tutorial: Introducci√≥n a Quarto

¬°Bienvenido! En este tutorial aprender√°s los fundamentos para crear documentos din√°micos con Quarto.

## ¬øQu√© aprender√°s?

Al final de este tutorial ser√°s capaz de:

::: {.incremental}
- Crear tu primer documento Quarto
- Combinar texto, c√≥digo y visualizaciones
- Renderizar documentos a HTML, PDF y m√°s formatos
- Configurar opciones de ejecuci√≥n de c√≥digo
- Crear contenido interactivo
:::

## Paso 1: Configuraci√≥n inicial

### Verificar instalaci√≥n

Primero, verifica que Quarto est√© instalado correctamente:

```bash
quarto --version
```

::: {.callout-note}
Si no tienes Quarto instalado, visita [quarto.org](https://quarto.org/docs/get-started/) para instrucciones de instalaci√≥n.
:::

### Crear tu primer documento

1. Crea un nuevo archivo llamado `mi-primer-documento.qmd`
2. Agrega el siguiente contenido:

```markdown
---
title: "Mi Primer Documento"
author: "Tu Nombre"
format: html
---

# Introducci√≥n

Este es mi primer documento con Quarto.

## Un poco de c√≥digo Python

```{python}
print("¬°Hola, Quarto!")
```
```

## Paso 2: Elementos b√°sicos

### Header YAML

El header YAML (entre `---`) controla las opciones del documento:

```yaml
---
title: "T√≠tulo del documento"
author: "Tu nombre"
date: today
format: 
  html:
    toc: true
    code-fold: true
execute:
  echo: true
  warning: false
---
```

### Texto y Markdown

Quarto usa Markdown extendido. Aqu√≠ algunos elementos √∫tiles:

- **Negrita** y *cursiva*
- `c√≥digo inline`
- [Enlaces](https://quarto.org)
- Listas numeradas y con vi√±etas

> Las citas se ven as√≠

### Bloques de c√≥digo

```{python}
#| echo: true
#| eval: true

# Este c√≥digo se ejecutar√° y mostrar√°
import matplotlib.pyplot as plt
import numpy as np

x = np.linspace(0, 10, 100)
y = np.sin(x)

plt.figure(figsize=(8, 4))
plt.plot(x, y, 'b-', linewidth=2)
plt.title('Funci√≥n Seno')
plt.xlabel('x')
plt.ylabel('sin(x)')
plt.grid(True, alpha=0.3)
plt.show()
```

## Paso 3: Opciones de c√≥digo

### Controlar la ejecuci√≥n

Usa opciones en comentarios especiales para controlar c√≥mo se ejecuta el c√≥digo:

```{python}
#| echo: false
#| eval: true
#| fig-cap: "Gr√°fico generado sin mostrar c√≥digo"

# Este c√≥digo se ejecuta pero no se muestra
plt.figure(figsize=(6, 4))
plt.bar(['A', 'B', 'C', 'D'], [23, 45, 56, 78])
plt.title('Datos de Ejemplo')
plt.ylabel('Valores')
plt.show()
```

### Opciones √∫tiles

| Opci√≥n | Descripci√≥n | Valores |
|--------|-------------|---------|
| `echo` | Mostrar c√≥digo | `true`, `false` |
| `eval` | Ejecutar c√≥digo | `true`, `false` |
| `include` | Incluir en output | `true`, `false` |
| `warning` | Mostrar warnings | `true`, `false` |
| `fig-cap` | T√≠tulo de figura | texto |
| `fig-width` | Ancho de figura | n√∫mero |

## Paso 4: Contenido interactivo

### Tabs interactivos

::: {.panel-tabset}

## C√≥digo Python

```{python}
# An√°lisis simple de datos
import pandas as pd

datos = {'nombre': ['Ana', 'Luis', 'Mar√≠a'], 
         'edad': [25, 30, 35],
         'ciudad': ['Madrid', 'Barcelona', 'Valencia']}

df = pd.DataFrame(datos)
print(df)
```

## C√≥digo R

```r
# install.packages("ggplot2")  # Si no est√° instalado
library(ggplot2)

# Crear datos de ejemplo
data <- data.frame(
  x = 1:10,
  y = rnorm(10)
)

# Crear gr√°fico
ggplot(data, aes(x, y)) + 
  geom_point() + 
  geom_smooth() +
  labs(title = "Datos aleatorios")
```

## SQL

```sql
SELECT 
    nombre,
    edad,
    CASE 
        WHEN edad < 30 THEN 'Joven'
        WHEN edad < 40 THEN 'Adulto'
        ELSE 'Mayor'
    END as categoria
FROM usuarios
ORDER BY edad;
```

:::

### Callouts informativos

::: {.callout-tip}
## üí° Consejo

Los callouts son excelentes para destacar informaci√≥n importante o dar consejos adicionales.
:::

::: {.callout-warning}
## ‚ö†Ô∏è Cuidado

Siempre verifica que tu c√≥digo funciona antes de renderizar el documento final.
:::

::: {.callout-important}
## üìã Importante

Los archivos .qmd deben guardarse con codificaci√≥n UTF-8 para evitar problemas con caracteres especiales.
:::

## Paso 5: Ejercicios pr√°cticos

### Ejercicio 1: Tu primera visualizaci√≥n

Crea un gr√°fico que muestre la evoluci√≥n de datos a lo largo del tiempo:

```{python}
#| code-fold: true
#| fig-cap: "Evoluci√≥n de ventas mensuales"

# Datos de ejemplo
meses = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun']
ventas = [120, 135, 148, 162, 155, 180]

plt.figure(figsize=(10, 5))
plt.plot(meses, ventas, marker='o', linewidth=2, markersize=8)
plt.title('Evoluci√≥n de Ventas Mensuales', fontsize=16)
plt.ylabel('Ventas (miles ‚Ç¨)')
plt.grid(True, alpha=0.3)

# Agregar valores en cada punto
for i, v in enumerate(ventas):
    plt.text(i, v + 5, str(v), ha='center', fontweight='bold')

plt.tight_layout()
plt.show()
```

### Ejercicio 2: Tabla interactiva

```{python}
# Crear una tabla con datos de ejemplo
datos_empleados = {
    'Nombre': ['Ana Garc√≠a', 'Luis Mart√≠n', 'Mar√≠a L√≥pez', 'Carlos Ruiz'],
    'Departamento': ['Ventas', 'IT', 'Marketing', 'IT'],
    'Salario': [45000, 55000, 48000, 60000],
    'A√±os de experiencia': [3, 5, 4, 7]
}

df_empleados = pd.DataFrame(datos_empleados)

# Calcular estad√≠sticas
print("üìä Resumen de datos:")
print(f"Total empleados: {len(df_empleados)}")
print(f"Salario promedio: {df_empleados['Salario'].mean():,.0f}‚Ç¨")
print(f"Experiencia promedia: {df_empleados['A√±os de experiencia'].mean():.1f} a√±os")
print("\nüìã Tabla de empleados:")
print(df_empleados.to_string(index=False))
```

## Paso 6: Renderizar tu documento

### Desde la l√≠nea de comandos

```bash
# Renderizar a HTML
quarto render mi-documento.qmd

# Renderizar a PDF (requiere LaTeX)
quarto render mi-documento.qmd --to pdf

# Renderizar a Word
quarto render mi-documento.qmd --to docx
```

### Desde Python/Jupyter

```python
import subprocess

# Renderizar documento
resultado = subprocess.run(['quarto', 'render', 'mi-documento.qmd'], 
                          capture_output=True, text=True)

if resultado.returncode == 0:
    print("‚úÖ Documento renderizado correctamente")
else:
    print("‚ùå Error al renderizar:", resultado.stderr)
```

## Pr√≥ximos pasos

¬°Felicidades! Has completado tu primer tutorial de Quarto. Ahora puedes:

### Nivel intermedio
- [ ] Explorar diferentes themes y layouts
- [ ] Crear sitios web con m√∫ltiples p√°ginas
- [ ] Usar par√°metros para documentos din√°micos
- [ ] Integrar con bases de datos

### Nivel avanzado  
- [ ] Crear extensiones personalizadas
- [ ] Publicar en GitHub Pages
- [ ] Automatizar con GitHub Actions
- [ ] Crear dashboards interactivos

## Recursos adicionales

### Documentaci√≥n oficial
- [Gu√≠a de Quarto](https://quarto.org/docs/guide/)
- [Galer√≠a de ejemplos](https://quarto.org/docs/gallery/)
- [Referencias de formato](https://quarto.org/docs/reference/)

### Comunidad
- [Foro de Quarto](https://github.com/quarto-dev/quarto-cli/discussions)
- [Stack Overflow - Tag Quarto](https://stackoverflow.com/questions/tagged/quarto)

---

::: {.callout-note}
## üéâ ¬°Completado!

Has terminado el tutorial b√°sico de Quarto. ¬°Ahora es tu turno de experimentar y crear contenido incre√≠ble!
:::

*Tutorial creado con ‚ù§Ô∏è usando Quarto*